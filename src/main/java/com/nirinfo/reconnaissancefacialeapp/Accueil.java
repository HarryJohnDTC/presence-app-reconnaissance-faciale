/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.nirinfo.reconnaissancefacialeapp;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class Accueil extends javax.swing.JFrame {
    private DatabaseHelper dbHelper;
    private ImageComparator imageComparator;
    private Camera camera;


    /**
     * Creates new form Accueil
     */
    public Accueil() {
        initComponents();
        dbHelper = new DatabaseHelper();
        imageComparator = new ImageComparator();
        afficherUtilisateurs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ajout = new javax.swing.JButton();
        present = new javax.swing.JButton();
        nomTf = new javax.swing.JTextField();
        mailTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        afficherTout = new javax.swing.JTable();
        actualiser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ajout.setText("Ajout");
        ajout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutActionPerformed(evt);
            }
        });

        present.setText("Present");
        present.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentActionPerformed(evt);
            }
        });

        nomTf.setText("Nom");

        mailTf.setText("Mail");

        afficherTout.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        afficherTout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                afficherToutMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(afficherTout);

        actualiser.setText("Actualiser");
        actualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mailTf)
                    .addComponent(nomTf, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(present)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(actualiser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ajout)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(present)
                    .addComponent(nomTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mailTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(actualiser)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ajout))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ajoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutActionPerformed
              
        CameraAppSwing cam = new CameraAppSwing();
        cam.setVisible(true);  
        
                // TODO add your handling code here:
    }//GEN-LAST:event_ajoutActionPerformed

    private void actualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualiserActionPerformed

        afficherUtilisateurs();
    }//GEN-LAST:event_actualiserActionPerformed

    private void presentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentActionPerformed
        // TODO add your handling code here:
                // Récupérer les informations utilisateur
                    try {
        // Récupérer les informations utilisateur
        String nom = nomTf.getText().trim();
        String mail = mailTf.getText().trim();

        if (nom.isEmpty() || mail.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez entrer un nom et un email valides.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Initialiser la caméra
        camera = new Camera();

        // Capturer l'image via la caméra
        byte[] capturedImage = camera.captureImageAsBytes();
        if (capturedImage == null) {
            JOptionPane.showMessageDialog(this, "Échec de la capture de l'image via la caméra.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        

        // Récupérer l'image stockée dans la base de données
        byte[] databaseImage = dbHelper.getImageFromDatabase(nom, mail);
        if (databaseImage == null) {
            JOptionPane.showMessageDialog(this, "Aucune image trouvée pour cet utilisateur.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Comparer les deux images avec un seuil de 80%
        ImageComparator comparator = new ImageComparator();
        boolean isMatching = comparator.compareImagesWithThreshold(databaseImage, capturedImage, 0.8);

        // Mettre à jour la présence en fonction du résultat
        if (isMatching) {
            updatePresence(nom, mail);
            JOptionPane.showMessageDialog(this, "L'utilisateur a été marqué comme Présent.", "Succès", JOptionPane.INFORMATION_MESSAGE);
            camera.quitCamera();
        } else {
            updateAbsence(nom, mail);  // Marquer l'utilisateur comme absent
            JOptionPane.showMessageDialog(this, "Les images ne correspondent pas. Présence marquée comme Absent.", "Information", JOptionPane.WARNING_MESSAGE);
            camera.quitCamera();
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Une erreur s'est produite : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
                    
    }//GEN-LAST:event_presentActionPerformed
    
    // Méthode pour mettre à jour la présence de l'utilisateur en tant qu'absent
private void updateAbsence(String nom, String mail) {
    String query = "UPDATE users SET is_present = ? WHERE name = ? AND email = ?";
    try (PreparedStatement stmt = dbHelper.getConnection().prepareStatement(query)) {
        stmt.setBoolean(1, false); // Marque comme absent
        stmt.setString(2, nom);
        stmt.setString(3, mail);

        int rowsUpdated = stmt.executeUpdate();
        if (rowsUpdated > 0) {
            System.out.println("Absence mise à jour avec succès.");
            afficherUtilisateurs();
        } else {
            System.out.println("Aucun utilisateur correspondant trouvé.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erreur lors de la mise à jour de l'absence.", "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void updatePresence(String nom, String mail) {
    // Vérifier si les champs sont valides
    if (nom == null || mail == null || nom.trim().isEmpty() || mail.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur valide.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!mail.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
        JOptionPane.showMessageDialog(this, "Adresse email invalide.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Mise à jour de la base de données
    String query = "UPDATE users SET is_present = ? WHERE name = ? AND email = ?";
    try (PreparedStatement stmt = dbHelper.getConnection().prepareStatement(query)) {
        stmt.setBoolean(1, true); // Définir is_present à true
        stmt.setString(2, nom);
        stmt.setString(3, mail);

        int rowsUpdated = stmt.executeUpdate();
        if (rowsUpdated > 0) {
            System.out.println("L'utilisateur a été marqué comme présent.");
            JOptionPane.showMessageDialog(this, "Présence mise à jour avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
            afficherUtilisateurs(); // Mettre à jour l'affichage du tableau
        } else {
            JOptionPane.showMessageDialog(this, "Aucun utilisateur correspondant trouvé.", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erreur lors de la mise à jour de la présence.", "Erreur", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    
    private void afficherToutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_afficherToutMouseClicked
        // TODO add your handling code here:
            // Récupérer l'index de la ligne sélectionnée
    int selectedRow = afficherTout.getSelectedRow();

    // Vérifier si une ligne est sélectionnée
    if (selectedRow != -1) {
        // Récupérer les données de la ligne sélectionnée
        String nom = afficherTout.getValueAt(selectedRow, 0).toString();
        String mail = afficherTout.getValueAt(selectedRow, 1).toString();

        // Remplir les champs de texte
        nomTf.setText(nom);
        mailTf.setText(mail);
     }
    }//GEN-LAST:event_afficherToutMouseClicked


    
    private void afficherUtilisateurs() {
    // Exemple de récupération de données depuis une base de données
    List<Object[]> utilisateurs = getUsersFromDatabase();

    // Définir les colonnes du tableau
    String[] columnNames = {"Nom", "Mail", "Présent ou Non"};

    // Créer le modèle de table
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

    // Ajouter les données au modèle
    for (Object[] utilisateur : utilisateurs) {
        model.addRow(utilisateur);
    }

    // Affecter le modèle au tableau afficherTout
    afficherTout.setModel(model);
}
    
public List<Object[]> getUsersFromDatabase() {
    List<Object[]> utilisateurs = new ArrayList<>();
    String query = "SELECT name, email, is_present FROM users"; // Modified query to include 'is_present'

    try (PreparedStatement stmt = dbHelper.getConnection().prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        while (rs.next()) {
            String nom = rs.getString("name");
            String email = rs.getString("email");
            boolean isPresent = rs.getBoolean("is_present"); // Get the 'is_present' value
            utilisateurs.add(new Object[]{nom, email, isPresent ? "Present" : "Absent"}); // Show status
        }
    } catch (SQLException e) {
        System.err.println("Erreur lors de la récupération des utilisateurs : " + e.getMessage());
    }

    return utilisateurs;
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualiser;
    private javax.swing.JTable afficherTout;
    private javax.swing.JButton ajout;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mailTf;
    private javax.swing.JTextField nomTf;
    private javax.swing.JButton present;
    // End of variables declaration//GEN-END:variables
}
